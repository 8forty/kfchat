import logging
from abc import ABC

import logstuff
from llmconfig.llmsettings import LLMSettings

log: logging.Logger = logging.getLogger(__name__)
log.setLevel(logstuff.logging_level)


class LLMMessagePair:
    """
    Represents a message pair for an LLM API with a role and content.
    """

    def __init__(self, role: str, content: str):
        self.role = role
        self.content = content

    def __repr__(self) -> str:
        return f'{self.__dict__!r}'


class LLMExchange(ABC):
    """
    an instance of an interactions with an LLM

    :ivar prompt: the prompt
    :type prompt: str
    :ivar provider: the LLM provider name, e.g. 'OPENAI' or 'ANTHROMPIC'
    :type provider: str
    :ivar model_name: the model
    :type model_name: str
    :ivar settings: settings for the LLM
    :type settings: LLMSettings
    :ivar responses: List of LLMMessagePair representing the interaction (e.g., prompt-response pairs).
    :type responses: list[LLMMessagePair]
    :ivar input_tokens: The number of tokens present in the input provided to the LLM.
    :type input_tokens: int
    :ivar output_tokens: The number of tokens generated by the LLM in the response.
    :type output_tokens: int
    :ivar response_duration_secs: Time taken, in seconds, for the LLM to generate a response.
    :type response_duration_secs: float
    :ivar problems: A dictionary mapping response indices to descriptions of problems or errors
        encountered during interaction.
    :type problems: dict[int, str]
    """

    def __init__(self, prompt: str, provider: str, model_name: str, settings: LLMSettings,
                 responses: list[LLMMessagePair], input_tokens: int, output_tokens: int,
                 response_duration_seconds: float, problems: dict[int, str]):
        self.prompt = prompt
        self.provider = provider
        self.model_name = model_name
        self.settings = settings
        self.responses = responses
        self.input_tokens = input_tokens
        self.output_tokens = output_tokens
        self.response_duration_secs = response_duration_seconds
        self.problems = problems  # [response-idx, problem-description]

    def __repr__(self) -> str:
        return f'{self.__class__!s}:{self.__dict__!r}'
